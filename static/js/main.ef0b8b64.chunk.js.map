{"version":3,"sources":["API.js","Components/DateRange.jsx","Components/NumRange.jsx","Components/SortSelect.jsx","Components/Table.jsx","App.js","index.js"],"names":["BASE_URL","cachedData","fetchIncomeDataWithRetry","async","retries","arguments","length","undefined","delay","console","log","response","fetch","ok","status","warn","concat","Promise","resolve","setTimeout","Error","statusText","data","json","error","message","DateRange","_ref","startDate","setStartDate","endDate","setEndDate","React","createElement","className","type","value","onChange","e","target","NumRange","min","setMin","max","setMax","minLabel","maxLabel","Number","SortSelect","sortBy","setSortBy","sortOrder","setSortOrder","label","arrow","setArrow","useState","useEffect","onClick","handleClick","newOrder","Table","setData","filtered","setFiltered","maxRev","setMaxRev","minRev","setMinRev","maxIncome","setMaxIncome","minIncome","setMinIncome","fetchedData","fetchIncomeData","fetchData","sortedData","filter","row","rowDate","Date","date","start","end","revenue","netIncome","sort","a","b","valueA","valueB","map","index","key","grossProfit","eps","operatingIncome","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ef0b8b64.chunk.js","sourcesContent":["const BASE_URL = \"https://financialmodelingprep.com/api/v3/income-statement/AAPL?period=annual&apikey=j34oIZHQww8ycoR5QhWyRpyYmNXd0XDn\";\r\n\r\n// In-memory cache for the fetched data\r\nlet cachedData \r\n\r\nlet testData = [\r\n    {\r\n      \"date\": \"2024-09-28\",\r\n      \"symbol\": \"AAPL\",\r\n      \"reportedCurrency\": \"USD\",\r\n      \"cik\": \"0000320193\",\r\n      \"fillingDate\": \"2024-11-01\",\r\n      \"acceptedDate\": \"2024-11-01 06:01:36\",\r\n      \"calendarYear\": \"2024\",\r\n      \"period\": \"FY\",\r\n      \"revenue\": 391035000000,\r\n      \"costOfRevenue\": 210352000000,\r\n      \"grossProfit\": 180683000000,\r\n      \"grossProfitRatio\": 0.4620634982,\r\n      \"researchAndDevelopmentExpenses\": 31370000000,\r\n      \"generalAndAdministrativeExpenses\": 0,\r\n      \"sellingAndMarketingExpenses\": 0,\r\n      \"sellingGeneralAndAdministrativeExpenses\": 26097000000,\r\n      \"otherExpenses\": 0,\r\n      \"operatingExpenses\": 57467000000,\r\n      \"costAndExpenses\": 267819000000,\r\n      \"interestIncome\": 0,\r\n      \"interestExpense\": 0,\r\n      \"depreciationAndAmortization\": 11445000000,\r\n      \"ebitda\": 134661000000,\r\n      \"ebitdaratio\": 0.3443707085,\r\n      \"operatingIncome\": 123216000000,\r\n      \"operatingIncomeRatio\": 0.3151022287,\r\n      \"totalOtherIncomeExpensesNet\": 269000000,\r\n      \"incomeBeforeTax\": 123485000000,\r\n      \"incomeBeforeTaxRatio\": 0.3157901467,\r\n      \"incomeTaxExpense\": 29749000000,\r\n      \"netIncome\": 93736000000,\r\n      \"netIncomeRatio\": 0.2397125577,\r\n      \"eps\": 6.11,\r\n      \"epsdiluted\": 6.08,\r\n      \"weightedAverageShsOut\": 15343783000,\r\n      \"weightedAverageShsOutDil\": 15408095000,\r\n      \"link\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019324000123/0000320193-24-000123-index.htm\",\r\n      \"finalLink\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019324000123/aapl-20240928.htm\"\r\n    },\r\n    {\r\n      \"date\": \"2023-09-30\",\r\n      \"symbol\": \"AAPL\",\r\n      \"reportedCurrency\": \"USD\",\r\n      \"cik\": \"0000320193\",\r\n      \"fillingDate\": \"2023-11-03\",\r\n      \"acceptedDate\": \"2023-11-02 18:08:27\",\r\n      \"calendarYear\": \"2023\",\r\n      \"period\": \"FY\",\r\n      \"revenue\": 383285000000,\r\n      \"costOfRevenue\": 214137000000,\r\n      \"grossProfit\": 169148000000,\r\n      \"grossProfitRatio\": 0.4413112958,\r\n      \"researchAndDevelopmentExpenses\": 29915000000,\r\n      \"generalAndAdministrativeExpenses\": 0,\r\n      \"sellingAndMarketingExpenses\": 0,\r\n      \"sellingGeneralAndAdministrativeExpenses\": 24932000000,\r\n      \"otherExpenses\": 382000000,\r\n      \"operatingExpenses\": 54847000000,\r\n      \"costAndExpenses\": 268984000000,\r\n      \"interestIncome\": 3750000000,\r\n      \"interestExpense\": 3933000000,\r\n      \"depreciationAndAmortization\": 11519000000,\r\n      \"ebitda\": 125820000000,\r\n      \"ebitdaratio\": 0.3282674772,\r\n      \"operatingIncome\": 114301000000,\r\n      \"operatingIncomeRatio\": 0.2982141227,\r\n      \"totalOtherIncomeExpensesNet\": -565000000,\r\n      \"incomeBeforeTax\": 113736000000,\r\n      \"incomeBeforeTaxRatio\": 0.2967400237,\r\n      \"incomeTaxExpense\": 16741000000,\r\n      \"netIncome\": 96995000000,\r\n      \"netIncomeRatio\": 0.2530623426,\r\n      \"eps\": 6.16,\r\n      \"epsdiluted\": 6.13,\r\n      \"weightedAverageShsOut\": 15744231000,\r\n      \"weightedAverageShsOutDil\": 15812547000,\r\n      \"link\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/0000320193-23-000106-index.htm\",\r\n      \"finalLink\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/aapl-20230930.htm\"\r\n    },\r\n    {\r\n      \"date\": \"2022-09-24\",\r\n      \"symbol\": \"AAPL\",\r\n      \"reportedCurrency\": \"USD\",\r\n      \"cik\": \"0000320193\",\r\n      \"fillingDate\": \"2022-10-28\",\r\n      \"acceptedDate\": \"2022-10-27 18:01:14\",\r\n      \"calendarYear\": \"2022\",\r\n      \"period\": \"FY\",\r\n      \"revenue\": 394328000000,\r\n      \"costOfRevenue\": 223546000000,\r\n      \"grossProfit\": 170782000000,\r\n      \"grossProfitRatio\": 0.4330963056,\r\n      \"researchAndDevelopmentExpenses\": 26251000000,\r\n      \"generalAndAdministrativeExpenses\": 0,\r\n      \"sellingAndMarketingExpenses\": 0,\r\n      \"sellingGeneralAndAdministrativeExpenses\": 25094000000,\r\n      \"otherExpenses\": 228000000,\r\n      \"operatingExpenses\": 51573000000,\r\n      \"costAndExpenses\": 275119000000,\r\n      \"interestIncome\": 2825000000,\r\n      \"interestExpense\": 2931000000,\r\n      \"depreciationAndAmortization\": 11104000000,\r\n      \"ebitda\": 130541000000,\r\n      \"ebitdaratio\": 0.3310467428,\r\n      \"operatingIncome\": 119437000000,\r\n      \"operatingIncomeRatio\": 0.302887444,\r\n      \"totalOtherIncomeExpensesNet\": -334000000,\r\n      \"incomeBeforeTax\": 119103000000,\r\n      \"incomeBeforeTaxRatio\": 0.3020404333,\r\n      \"incomeTaxExpense\": 19300000000,\r\n      \"netIncome\": 99803000000,\r\n      \"netIncomeRatio\": 0.2530964071,\r\n      \"eps\": 6.15,\r\n      \"epsdiluted\": 6.11,\r\n      \"weightedAverageShsOut\": 16215963000,\r\n      \"weightedAverageShsOutDil\": 16325819000,\r\n      \"link\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019322000108/0000320193-22-000108-index.htm\",\r\n      \"finalLink\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019322000108/aapl-20220924.htm\"\r\n    },\r\n    {\r\n      \"date\": \"2021-09-25\",\r\n      \"symbol\": \"AAPL\",\r\n      \"reportedCurrency\": \"USD\",\r\n      \"cik\": \"0000320193\",\r\n      \"fillingDate\": \"2021-10-29\",\r\n      \"acceptedDate\": \"2021-10-28 18:04:28\",\r\n      \"calendarYear\": \"2021\",\r\n      \"period\": \"FY\",\r\n      \"revenue\": 365817000000,\r\n      \"costOfRevenue\": 212981000000,\r\n      \"grossProfit\": 152836000000,\r\n      \"grossProfitRatio\": 0.4177935963,\r\n      \"researchAndDevelopmentExpenses\": 21914000000,\r\n      \"generalAndAdministrativeExpenses\": 0,\r\n      \"sellingAndMarketingExpenses\": 0,\r\n      \"sellingGeneralAndAdministrativeExpenses\": 21973000000,\r\n      \"otherExpenses\": -60000000,\r\n      \"operatingExpenses\": 43827000000,\r\n      \"costAndExpenses\": 256808000000,\r\n      \"interestIncome\": 2843000000,\r\n      \"interestExpense\": 2645000000,\r\n      \"depreciationAndAmortization\": 11284000000,\r\n      \"ebitda\": 120233000000,\r\n      \"ebitdaratio\": 0.3286697994,\r\n      \"operatingIncome\": 108949000000,\r\n      \"operatingIncomeRatio\": 0.2978237753,\r\n      \"totalOtherIncomeExpensesNet\": 258000000,\r\n      \"incomeBeforeTax\": 109207000000,\r\n      \"incomeBeforeTaxRatio\": 0.2985290459,\r\n      \"incomeTaxExpense\": 14527000000,\r\n      \"netIncome\": 94680000000,\r\n      \"netIncomeRatio\": 0.2588179336,\r\n      \"eps\": 5.67,\r\n      \"epsdiluted\": 5.61,\r\n      \"weightedAverageShsOut\": 16701272000,\r\n      \"weightedAverageShsOutDil\": 16864919000,\r\n      \"link\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019321000105/0000320193-21-000105-index.htm\",\r\n      \"finalLink\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019321000105/aapl-20210925.htm\"\r\n    },\r\n    {\r\n      \"date\": \"2020-09-26\",\r\n      \"symbol\": \"AAPL\",\r\n      \"reportedCurrency\": \"USD\",\r\n      \"cik\": \"0000320193\",\r\n      \"fillingDate\": \"2020-10-30\",\r\n      \"acceptedDate\": \"2020-10-29 18:06:25\",\r\n      \"calendarYear\": \"2020\",\r\n      \"period\": \"FY\",\r\n      \"revenue\": 274515000000,\r\n      \"costOfRevenue\": 169559000000,\r\n      \"grossProfit\": 104956000000,\r\n      \"grossProfitRatio\": 0.3823324773,\r\n      \"researchAndDevelopmentExpenses\": 18752000000,\r\n      \"generalAndAdministrativeExpenses\": 0,\r\n      \"sellingAndMarketingExpenses\": 0,\r\n      \"sellingGeneralAndAdministrativeExpenses\": 19916000000,\r\n      \"otherExpenses\": 87000000,\r\n      \"operatingExpenses\": 38755000000,\r\n      \"costAndExpenses\": 208314000000,\r\n      \"interestIncome\": 3763000000,\r\n      \"interestExpense\": 2873000000,\r\n      \"depreciationAndAmortization\": 11056000000,\r\n      \"ebitda\": 77344000000,\r\n      \"ebitdaratio\": 0.2817478098,\r\n      \"operatingIncome\": 66288000000,\r\n      \"operatingIncomeRatio\": 0.2414731435,\r\n      \"totalOtherIncomeExpensesNet\": 803000000,\r\n      \"incomeBeforeTax\": 67091000000,\r\n      \"incomeBeforeTaxRatio\": 0.2443983025,\r\n      \"incomeTaxExpense\": 9680000000,\r\n      \"netIncome\": 57411000000,\r\n      \"netIncomeRatio\": 0.2091361128,\r\n      \"eps\": 3.31,\r\n      \"epsdiluted\": 3.28,\r\n      \"weightedAverageShsOut\": 17352119000,\r\n      \"weightedAverageShsOutDil\": 17528214000,\r\n      \"link\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019320000096/0000320193-20-000096-index.htm\",\r\n      \"finalLink\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019320000096/aapl-20200926.htm\"\r\n    }\r\n  ];\r\n\r\n/**\r\n * Fetch data with retry and exponential backoff.\r\n * \r\n * @param {number} retries - Number of retries left.\r\n * @param {number} delay - Initial delay before retrying, in milliseconds.\r\n * @returns {Promise<Object>} - The fetched data.\r\n */\r\nasync function fetchIncomeDataWithRetry(retries = 5, delay = 1000) {\r\n    try {\r\n        // Use cached data if available\r\n        if (cachedData) {\r\n            console.log(\"Using cached data.\");\r\n            return cachedData;\r\n        }\r\n\r\n        const response = await fetch(BASE_URL);\r\n\r\n        if (!response.ok) {\r\n            if (response.status === 429 && retries > 0) {\r\n                // Too many requests, wait and retry\r\n                console.warn(`Rate limit hit. Retrying in ${delay / 1000} seconds...`);\r\n                await new Promise(resolve => setTimeout(resolve, delay));\r\n                return fetchIncomeDataWithRetry(retries - 1, delay * 2); // Exponential backoff\r\n            }\r\n\r\n            throw new Error(`Failed to fetch data: ${response.status} - ${response.statusText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        cachedData = data; // Cache the data\r\n        return data;\r\n    } catch (error) {\r\n        if (retries > 0) {\r\n            console.warn(`Error occurred: ${error.message}. Retrying in ${delay / 1000} seconds...`);\r\n            await new Promise(resolve => setTimeout(resolve, delay));\r\n            return fetchIncomeDataWithRetry(retries - 1, delay * 2); // Exponential backoff\r\n        }\r\n\r\n        console.error(\"Error fetching income statement data:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport default fetchIncomeDataWithRetry;\r\n","// src/Components/DateRange.jsx\r\nimport \"./DateRange.css\"\r\nimport React from \"react\";\r\n\r\nfunction DateRange({ startDate, setStartDate, endDate, setEndDate }) {\r\n\r\n    return (\r\n        <div className=\"date-range\">\r\n            <label>\r\n                Start Date:\r\n                <input\r\n                    type=\"date\"\r\n                    value={startDate || \"\"}\r\n                    onChange={(e) => setStartDate(e.target.value)}\r\n                />\r\n            </label>\r\n            <label>\r\n                End Date:\r\n                <input\r\n                    type=\"date\"\r\n                    value={endDate || \"\"}\r\n                    onChange={(e) => setEndDate(e.target.value)}\r\n                />\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DateRange;\r\n","// src/Components/NumRange.jsx\r\nimport \"./NumRange.css\"\r\nimport React from \"react\";\r\n\r\nfunction NumRange({ min, setMin, max, setMax, minLabel, maxLabel }) {\r\n    return (\r\n        <div className=\"num-range\">\r\n            <label>\r\n                \r\n            <span>{minLabel}: </span>\r\n                <input\r\n                    type=\"number\"\r\n                    value={min || \"\"}\r\n                    onChange={(e) => setMin(Number(e.target.value))}\r\n                />\r\n            </label>\r\n            <label>\r\n                <span>{maxLabel}: </span>\r\n                <input\r\n                    type=\"number\"\r\n                    value={max || \"\"}\r\n                    onChange={(e) => setMax(Number(e.target.value))}\r\n                />\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NumRange;\r\n","// src/Components/SortSelect.jsx\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./SortSelect.css\"\r\n\r\nfunction SortSelect({ sortBy, setSortBy, sortOrder, setSortOrder, label }) {\r\n    const [arrow, setArrow] = useState(\" -\");\r\n\r\n    const handleClick = () => {\r\n        if (sortBy === label) {\r\n            // Toggle sort order if the same column is clicked\r\n            const newOrder = sortOrder === \"ascending\" ? \"descending\" : \"ascending\";\r\n            setSortOrder(newOrder);\r\n            setArrow(newOrder === \"ascending\" ? \" 🔼\" : \" 🔽\");\r\n        } else {\r\n            // Set sorting to this column in ascending order\r\n            setSortBy(label);\r\n            setSortOrder(\"ascending\");\r\n            setArrow(\" 🔼\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Reset arrow if another column is selected\r\n        if (sortBy !== label) {\r\n            setArrow(\" -\");\r\n        }\r\n    }, [sortBy, label]);\r\n\r\n    return (\r\n        <th onClick={handleClick} className=\"sort-select\">\r\n            <span>{label}</span>\r\n            {arrow}\r\n        </th>\r\n    );\r\n}\r\n\r\nexport default SortSelect;\r\n","// src/Components/Table.jsx\r\nimport React, { useEffect, useState } from \"react\";\r\nimport fetchIncomeData from \"../API\";\r\nimport DateRange from \"./DateRange\";\r\nimport \"./Table.css\";\r\nimport NumRange from \"./NumRange\";\r\nimport SortSelect from \"./SortSelect\"\r\n\r\nfunction Table() {\r\n    const [data, setData] = useState([]);\r\n    const [filtered, setFiltered] = useState([]);\r\n    const [startDate, setStartDate] = useState(\"\");\r\n    const [endDate, setEndDate] = useState(\"\");\r\n    const [maxRev, setMaxRev] = useState(\"\");\r\n    const [minRev, setMinRev] = useState(\"\");\r\n    const [maxIncome, setMaxIncome] = useState(\"\");\r\n    const [minIncome, setMinIncome] = useState(\"\");\r\n    const [sortBy, setSortBy] = useState(\"none\");\r\n    const [sortOrder, setSortOrder] = useState(\"ascending\");\r\n\r\n    // Fetch data\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const fetchedData = await fetchIncomeData();\r\n            setData(fetchedData);\r\n            setFiltered(fetchedData); // Initialize filtered with full data\r\n        }\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    // Filter data based on criteria & sort it\r\n    useEffect(() => {\r\n        if (sortBy === \"none\") return;\r\n    \r\n        const sortedData = [...data].filter((row) => {\r\n            // Apply the current filters\r\n            const rowDate = new Date(row.date);\r\n            const start = startDate ? new Date(startDate) : null;\r\n            const end = endDate ? new Date(endDate) : null;\r\n    \r\n            return (\r\n                (!start || rowDate >= start) &&\r\n                (!end || rowDate <= end) &&\r\n                (!minRev || row.revenue >= minRev) &&\r\n                (!maxRev || row.revenue <= maxRev) &&\r\n                (!minIncome || row.netIncome >= minIncome) &&\r\n                (!maxIncome || row.netIncome <= maxIncome)\r\n            );\r\n        });\r\n    \r\n        // Apply sorting\r\n        sortedData.sort((a, b) => {\r\n            let valueA, valueB;\r\n    \r\n            if (sortBy === \"Date\") {\r\n                valueA = new Date(a.date);\r\n                valueB = new Date(b.date);\r\n            } else if (sortBy === \"Revenue\") {\r\n                valueA = a.revenue;\r\n                valueB = b.revenue;\r\n            } else if (sortBy === \"Net Income\") {\r\n                valueA = a.netIncome;\r\n                valueB = b.netIncome;\r\n            }\r\n    \r\n            if (sortOrder === \"ascending\") {\r\n                return valueA > valueB ? 1 : -1;\r\n            } else {\r\n                return valueA < valueB ? 1 : -1;\r\n            }\r\n        });\r\n    \r\n        setFiltered(sortedData); // Update the filtered and sorted data\r\n    }, [sortBy, sortOrder, data, startDate, endDate, minRev, maxRev, minIncome, maxIncome]);\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <div className=\"filters\">\r\n                <DateRange\r\n                    startDate={startDate}\r\n                    setStartDate={setStartDate}\r\n                    endDate={endDate}\r\n                    setEndDate={setEndDate}\r\n                />\r\n                <NumRange\r\n                    min={minRev}\r\n                    setMin={setMinRev}\r\n                    max={maxRev}\r\n                    setMax={setMaxRev}\r\n                    minLabel={\"Minimum Revenue\"}\r\n                    maxLabel={\"Maximum Revenue\"}\r\n                />\r\n                <NumRange\r\n                    min={minIncome}\r\n                    setMin={setMinIncome}\r\n                    max={maxIncome}\r\n                    setMax={setMaxIncome}\r\n                    minLabel={\"Minimum Income\"}\r\n                    maxLabel={\"Maximum Income\"}\r\n                />\r\n            </div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <SortSelect\r\n                            sortBy={sortBy} \r\n                            setSortBy={setSortBy} \r\n                            setSortOrder={setSortOrder} \r\n                            sortOrder={sortOrder} \r\n                            label=\"Date\" \r\n                        />\r\n                        <SortSelect \r\n                            sortBy={sortBy} \r\n                            setSortBy={setSortBy} \r\n                            setSortOrder={setSortOrder} \r\n                            sortOrder={sortOrder} \r\n                            label=\"Revenue\" \r\n                        />\r\n                        <SortSelect \r\n                            sortBy={sortBy} \r\n                            setSortBy={setSortBy} \r\n                            setSortOrder={setSortOrder} \r\n                            sortOrder={sortOrder} \r\n                            label=\"Net Income\" \r\n                        />\r\n                        <th>Gross Profit</th>\r\n                        <th>EPS (Earnings Per Share)</th>\r\n                        <th>Operating Income</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {filtered.map((row, index) => (\r\n                        <tr key={index}>\r\n                            <td>{row.date}</td>\r\n                            <td>{row.revenue}</td>\r\n                            <td>{row.netIncome}</td>\r\n                            <td>{row.grossProfit}</td>\r\n                            <td>{row.eps}</td>\r\n                            <td>{row.operatingIncome}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","// src/App.js\nimport './App.css';\nimport Table from \"./Components/Table\"\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div>\n      <h1 className='title'>Financial Data Filtering App</h1>\n      <Table/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\n"],"sourceRoot":""}